/* automatically generated by rust-bindgen 0.60.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type max_align_t = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCType_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCType_st() {
    assert_eq!(
        ::std::mem::size_of::<LCType_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCType_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCType_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCType_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCType_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCType_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCType = *mut LCType_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCExpression_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCExpression_st() {
    assert_eq!(
        ::std::mem::size_of::<LCExpression_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCExpression_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCExpression_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCExpression_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCExpression_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCExpression_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCExpression = *mut LCExpression_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCConstantData_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCConstantData_st() {
    assert_eq!(
        ::std::mem::size_of::<LCConstantData_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCConstantData_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCConstantData_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCConstantData_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCConstantData_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCConstantData_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCConstantData = *mut LCConstantData_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCStmt_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCStmt_st() {
    assert_eq!(
        ::std::mem::size_of::<LCStmt_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCStmt_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCStmt_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCStmt_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCStmt_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCStmt_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCStmt = *mut LCStmt_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCContext_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCContext_st() {
    assert_eq!(
        ::std::mem::size_of::<LCContext_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCContext_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCContext_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCContext_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCContext_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCContext_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCContext = *mut LCContext_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDevice_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCDevice_st() {
    assert_eq!(
        ::std::mem::size_of::<LCDevice_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCDevice_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCDevice_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCDevice_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDevice_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDevice_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCDevice = *mut LCDevice_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCShader_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCShader_st() {
    assert_eq!(
        ::std::mem::size_of::<LCShader_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCShader_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCShader_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCShader_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCShader_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCShader_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCShader = *mut LCShader_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCBuffer_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCBuffer_st() {
    assert_eq!(
        ::std::mem::size_of::<LCBuffer_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCBuffer_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCBuffer_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCBuffer_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBuffer_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBuffer_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCBuffer = *mut LCBuffer_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCTexture_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCTexture_st() {
    assert_eq!(
        ::std::mem::size_of::<LCTexture_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCTexture_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCTexture_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCTexture_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTexture_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTexture_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCTexture = *mut LCTexture_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCStream_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCStream_st() {
    assert_eq!(
        ::std::mem::size_of::<LCStream_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCStream_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCStream_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCStream_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCStream_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCStream_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCStream = *mut LCStream_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCEvent_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCEvent_st() {
    assert_eq!(
        ::std::mem::size_of::<LCEvent_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCEvent_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCEvent_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCEvent_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCEvent_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCEvent_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCEvent = *mut LCEvent_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommandList_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCCommandList_st() {
    assert_eq!(
        ::std::mem::size_of::<LCCommandList_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCCommandList_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommandList_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCCommandList_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCCommandList_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommandList_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCCommandList = *mut LCCommandList_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommand_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCCommand_st() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCCommand_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCCommand_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCCommand_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommand_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCCommand = *mut LCCommand_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCBindlessArray_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCBindlessArray_st() {
    assert_eq!(
        ::std::mem::size_of::<LCBindlessArray_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCBindlessArray_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCBindlessArray_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCBindlessArray_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArray_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArray_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCBindlessArray = *mut LCBindlessArray_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCMesh_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCMesh_st() {
    assert_eq!(
        ::std::mem::size_of::<LCMesh_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCMesh_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCMesh_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCMesh_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCMesh_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCMesh_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCMesh = *mut LCMesh_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCAccel_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCAccel_st() {
    assert_eq!(
        ::std::mem::size_of::<LCAccel_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCAccel_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCAccel_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCAccel_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccel_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccel_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCAccel = *mut LCAccel_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCIRModule_st {
    pub __dummy: u64,
}
#[test]
fn bindgen_test_layout_LCIRModule_st() {
    assert_eq!(
        ::std::mem::size_of::<LCIRModule_st>(),
        8usize,
        concat!("Size of: ", stringify!(LCIRModule_st))
    );
    assert_eq!(
        ::std::mem::align_of::<LCIRModule_st>(),
        8usize,
        concat!("Alignment of ", stringify!(LCIRModule_st))
    );
    fn test_field___dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCIRModule_st>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCIRModule_st),
                "::",
                stringify!(__dummy)
            )
        );
    }
    test_field___dummy();
}
pub type LCIRModule = *mut LCIRModule_st;
pub type LCNodeRef = size_t;
impl LCAccelUsageHint {
    pub const FAST_TRACE: LCAccelUsageHint = LCAccelUsageHint(0);
}
impl LCAccelUsageHint {
    pub const FAST_UPDATE: LCAccelUsageHint = LCAccelUsageHint(1);
}
impl LCAccelUsageHint {
    pub const FAST_BUILD: LCAccelUsageHint = LCAccelUsageHint(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCAccelUsageHint(pub ::std::os::raw::c_int);
impl LCAccelBuildRequest {
    pub const PREFER_UPDATE: LCAccelBuildRequest = LCAccelBuildRequest(0);
}
impl LCAccelBuildRequest {
    pub const FORCE_BUILD: LCAccelBuildRequest = LCAccelBuildRequest(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCAccelBuildRequest(pub ::std::os::raw::c_int);
impl LCPixelStorage {
    pub const BYTE1: LCPixelStorage = LCPixelStorage(0);
}
impl LCPixelStorage {
    pub const BYTE2: LCPixelStorage = LCPixelStorage(1);
}
impl LCPixelStorage {
    pub const BYTE4: LCPixelStorage = LCPixelStorage(2);
}
impl LCPixelStorage {
    pub const SHORT1: LCPixelStorage = LCPixelStorage(3);
}
impl LCPixelStorage {
    pub const SHORT2: LCPixelStorage = LCPixelStorage(4);
}
impl LCPixelStorage {
    pub const SHORT4: LCPixelStorage = LCPixelStorage(5);
}
impl LCPixelStorage {
    pub const INT1: LCPixelStorage = LCPixelStorage(6);
}
impl LCPixelStorage {
    pub const INT2: LCPixelStorage = LCPixelStorage(7);
}
impl LCPixelStorage {
    pub const INT4: LCPixelStorage = LCPixelStorage(8);
}
impl LCPixelStorage {
    pub const HALF1: LCPixelStorage = LCPixelStorage(9);
}
impl LCPixelStorage {
    pub const HALF2: LCPixelStorage = LCPixelStorage(10);
}
impl LCPixelStorage {
    pub const HALF4: LCPixelStorage = LCPixelStorage(11);
}
impl LCPixelStorage {
    pub const FLOAT1: LCPixelStorage = LCPixelStorage(12);
}
impl LCPixelStorage {
    pub const FLOAT2: LCPixelStorage = LCPixelStorage(13);
}
impl LCPixelStorage {
    pub const FLOAT4: LCPixelStorage = LCPixelStorage(14);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCPixelStorage(pub ::std::os::raw::c_int);
impl LCPixelFormat {
    pub const R8_SINT: LCPixelFormat = LCPixelFormat(0);
}
impl LCPixelFormat {
    pub const R8_UINT: LCPixelFormat = LCPixelFormat(1);
}
impl LCPixelFormat {
    pub const R8_UNORM: LCPixelFormat = LCPixelFormat(2);
}
impl LCPixelFormat {
    pub const RG8_SINT: LCPixelFormat = LCPixelFormat(3);
}
impl LCPixelFormat {
    pub const RG8_UINT: LCPixelFormat = LCPixelFormat(4);
}
impl LCPixelFormat {
    pub const RG8_UNORM: LCPixelFormat = LCPixelFormat(5);
}
impl LCPixelFormat {
    pub const RGBA8_SINT: LCPixelFormat = LCPixelFormat(6);
}
impl LCPixelFormat {
    pub const RGBA8_UINT: LCPixelFormat = LCPixelFormat(7);
}
impl LCPixelFormat {
    pub const RGBA8_UNORM: LCPixelFormat = LCPixelFormat(8);
}
impl LCPixelFormat {
    pub const R16_SINT: LCPixelFormat = LCPixelFormat(9);
}
impl LCPixelFormat {
    pub const R16_UINT: LCPixelFormat = LCPixelFormat(10);
}
impl LCPixelFormat {
    pub const R16_UNORM: LCPixelFormat = LCPixelFormat(11);
}
impl LCPixelFormat {
    pub const RG16_SINT: LCPixelFormat = LCPixelFormat(12);
}
impl LCPixelFormat {
    pub const RG16_UINT: LCPixelFormat = LCPixelFormat(13);
}
impl LCPixelFormat {
    pub const RG16_UNORM: LCPixelFormat = LCPixelFormat(14);
}
impl LCPixelFormat {
    pub const RGBA16_SINT: LCPixelFormat = LCPixelFormat(15);
}
impl LCPixelFormat {
    pub const RGBA16_UINT: LCPixelFormat = LCPixelFormat(16);
}
impl LCPixelFormat {
    pub const RGBA16_UNORM: LCPixelFormat = LCPixelFormat(17);
}
impl LCPixelFormat {
    pub const R32_SINT: LCPixelFormat = LCPixelFormat(18);
}
impl LCPixelFormat {
    pub const R32_UINT: LCPixelFormat = LCPixelFormat(19);
}
impl LCPixelFormat {
    pub const RG32_SINT: LCPixelFormat = LCPixelFormat(20);
}
impl LCPixelFormat {
    pub const RG32_UINT: LCPixelFormat = LCPixelFormat(21);
}
impl LCPixelFormat {
    pub const RGBA32_SINT: LCPixelFormat = LCPixelFormat(22);
}
impl LCPixelFormat {
    pub const RGBA32_UINT: LCPixelFormat = LCPixelFormat(23);
}
impl LCPixelFormat {
    pub const R16_F: LCPixelFormat = LCPixelFormat(24);
}
impl LCPixelFormat {
    pub const RG16_F: LCPixelFormat = LCPixelFormat(25);
}
impl LCPixelFormat {
    pub const RGBA16_F: LCPixelFormat = LCPixelFormat(26);
}
impl LCPixelFormat {
    pub const R32_F: LCPixelFormat = LCPixelFormat(27);
}
impl LCPixelFormat {
    pub const RG32_F: LCPixelFormat = LCPixelFormat(28);
}
impl LCPixelFormat {
    pub const RGBA32_F: LCPixelFormat = LCPixelFormat(29);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCPixelFormat(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lc_uint3 {
    pub x: u32,
    pub y: u32,
    pub z: u32,
}
#[test]
fn bindgen_test_layout_lc_uint3() {
    assert_eq!(
        ::std::mem::size_of::<lc_uint3>(),
        12usize,
        concat!("Size of: ", stringify!(lc_uint3))
    );
    assert_eq!(
        ::std::mem::align_of::<lc_uint3>(),
        4usize,
        concat!("Alignment of ", stringify!(lc_uint3))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lc_uint3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lc_uint3),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lc_uint3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(lc_uint3),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lc_uint3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lc_uint3),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
}
impl LCAccelBuildModficationFlags {
    pub const ACCEL_MESH: LCAccelBuildModficationFlags = LCAccelBuildModficationFlags(1);
}
impl LCAccelBuildModficationFlags {
    pub const ACCEL_TRANSFORM: LCAccelBuildModficationFlags = LCAccelBuildModficationFlags(2);
}
impl LCAccelBuildModficationFlags {
    pub const ACCEL_VISIBILITY_ON: LCAccelBuildModficationFlags = LCAccelBuildModficationFlags(4);
}
impl LCAccelBuildModficationFlags {
    pub const ACCEL_VISIBILITY_OFF: LCAccelBuildModficationFlags = LCAccelBuildModficationFlags(8);
}
impl LCAccelBuildModficationFlags {
    pub const ACCEL_VISIBILITY: LCAccelBuildModficationFlags = LCAccelBuildModficationFlags(12);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCAccelBuildModficationFlags(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCAccelBuildModification {
    pub index: u32,
    pub flags: LCAccelBuildModficationFlags,
    pub mesh: u64,
    pub affine: [f32; 12usize],
}
#[test]
fn bindgen_test_layout_LCAccelBuildModification() {
    assert_eq!(
        ::std::mem::size_of::<LCAccelBuildModification>(),
        64usize,
        concat!("Size of: ", stringify!(LCAccelBuildModification))
    );
    assert_eq!(
        ::std::mem::align_of::<LCAccelBuildModification>(),
        8usize,
        concat!("Alignment of ", stringify!(LCAccelBuildModification))
    );
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildModification>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildModification),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildModification>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildModification),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_mesh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildModification>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mesh) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildModification),
                "::",
                stringify!(mesh)
            )
        );
    }
    test_field_mesh();
    fn test_field_affine() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildModification>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).affine) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildModification),
                "::",
                stringify!(affine)
            )
        );
    }
    test_field_affine();
}
impl LCSamplerFilter {
    pub const POINT: LCSamplerFilter = LCSamplerFilter(0);
}
impl LCSamplerFilter {
    pub const LINEAR_POINT: LCSamplerFilter = LCSamplerFilter(1);
}
impl LCSamplerFilter {
    pub const LINEAR_LINEAR: LCSamplerFilter = LCSamplerFilter(2);
}
impl LCSamplerFilter {
    pub const ANISOTROPIC: LCSamplerFilter = LCSamplerFilter(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCSamplerFilter(pub ::std::os::raw::c_int);
impl LCSamplerAddress {
    pub const EDGE: LCSamplerAddress = LCSamplerAddress(0);
}
impl LCSamplerAddress {
    pub const REPEAT: LCSamplerAddress = LCSamplerAddress(1);
}
impl LCSamplerAddress {
    pub const MIRROR: LCSamplerAddress = LCSamplerAddress(2);
}
impl LCSamplerAddress {
    pub const ZERO: LCSamplerAddress = LCSamplerAddress(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCSamplerAddress(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCSampler {
    pub filter: LCSamplerFilter,
    pub address: LCSamplerAddress,
}
#[test]
fn bindgen_test_layout_LCSampler() {
    assert_eq!(
        ::std::mem::size_of::<LCSampler>(),
        8usize,
        concat!("Size of: ", stringify!(LCSampler))
    );
    assert_eq!(
        ::std::mem::align_of::<LCSampler>(),
        4usize,
        concat!("Alignment of ", stringify!(LCSampler))
    );
    fn test_field_filter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCSampler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCSampler),
                "::",
                stringify!(filter)
            )
        );
    }
    test_field_filter();
    fn test_field_address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCSampler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(LCSampler),
                "::",
                stringify!(address)
            )
        );
    }
    test_field_address();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDeviceInterface {
    pub ctx: LCContext,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface)>,
    pub create_buffer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, size_bytes: size_t) -> u64,
    >,
    pub destroy_buffer:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub buffer_native_handle: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            handle: u64,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub create_texture: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            format: LCPixelFormat,
            dimension: u32,
            width: u32,
            height: u32,
            depth: u32,
            mipmap_levels: u32,
        ) -> u64,
    >,
    pub destroy_texture:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub texture_native_handle: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            handle: u64,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub create_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, size: size_t) -> u64,
    >,
    pub destroy_bindless_array:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub emplace_buffer_in_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            array: u64,
            index: size_t,
            handle: u64,
            offset_bytes: size_t,
        ),
    >,
    pub emplace_tex2d_in_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            array: u64,
            index: size_t,
            handle: u64,
            sampler: LCSampler,
        ),
    >,
    pub emplace_tex3d_in_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            array: u64,
            index: size_t,
            handle: u64,
            sampler: LCSampler,
        ),
    >,
    pub is_resource_in_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, array: u64, handle: u64) -> bool,
    >,
    pub remove_buffer_in_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, array: u64, index: size_t),
    >,
    pub remove_tex2d_in_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, array: u64, index: size_t),
    >,
    pub remove_tex3d_in_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, array: u64, index: size_t),
    >,
    pub create_stream: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, for_present: bool) -> u64,
    >,
    pub destroy_stream:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub synchronize_stream: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, stream_handle: u64),
    >,
    pub dispatch: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            stream_handle: u64,
            list: LCCommandList,
        ),
    >,
    pub dispatch_span: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            stream_handle: u64,
            lists: LCCommandList,
            count: size_t,
        ),
    >,
    pub dispatch_func: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            stream_handle: u64,
            func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
            arg: *mut ::std::os::raw::c_void,
        ),
    >,
    pub stream_native_handle: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            handle: u64,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub create_swap_chain: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            window_handle: u64,
            stream_handle: u64,
            width: u32,
            height: u32,
            allow_hdr: bool,
            back_buffer_size: u32,
        ) -> u64,
    >,
    pub destroy_swap_chain:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub swap_chain_pixel_storage: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64) -> LCPixelStorage,
    >,
    pub present_display_in_stream: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            stream_handle: u64,
            swapchain_handle: u64,
            image_handle: u64,
        ),
    >,
    pub create_shader: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            kernel: *mut ::std::os::raw::c_void,
            meta_options: *const ::std::os::raw::c_char,
        ) -> u64,
    >,
    pub destroy_shader:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub create_shader_ex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            kernel: *mut ::std::os::raw::c_void,
        ) -> u64,
    >,
    pub dispatch_shader_ex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            shader_handle: u64,
            args: *mut ::std::os::raw::c_void,
        ),
    >,
    pub create_event:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface) -> u64>,
    pub destroy_event:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub signal_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64, stream_handle: u64),
    >,
    pub wait_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64, stream_handle: u64),
    >,
    pub synchronize_event:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub create_mesh: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            v_buffer: u64,
            v_offset: size_t,
            v_stride: size_t,
            v_count: size_t,
            t_buffer: u64,
            t_offset: size_t,
            t_count: size_t,
            hint: LCAccelUsageHint,
        ) -> u64,
    >,
    pub destroy_mesh:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub create_accel: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, hint: LCAccelUsageHint) -> u64,
    >,
    pub destroy_accel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub query: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            meta_expr: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub requires_command_reordering:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface) -> bool>,
}
#[test]
fn bindgen_test_layout_LCDeviceInterface() {
    assert_eq!(
        ::std::mem::size_of::<LCDeviceInterface>(),
        344usize,
        concat!("Size of: ", stringify!(LCDeviceInterface))
    );
    assert_eq!(
        ::std::mem::align_of::<LCDeviceInterface>(),
        8usize,
        concat!("Alignment of ", stringify!(LCDeviceInterface))
    );
    fn test_field_ctx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(ctx)
            )
        );
    }
    test_field_ctx();
    fn test_field_dtor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtor) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(dtor)
            )
        );
    }
    test_field_dtor();
    fn test_field_create_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_buffer) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_buffer)
            )
        );
    }
    test_field_create_buffer();
    fn test_field_destroy_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_buffer) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_buffer)
            )
        );
    }
    test_field_destroy_buffer();
    fn test_field_buffer_native_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer_native_handle) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(buffer_native_handle)
            )
        );
    }
    test_field_buffer_native_handle();
    fn test_field_create_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_texture) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_texture)
            )
        );
    }
    test_field_create_texture();
    fn test_field_destroy_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_texture) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_texture)
            )
        );
    }
    test_field_destroy_texture();
    fn test_field_texture_native_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_native_handle) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(texture_native_handle)
            )
        );
    }
    test_field_texture_native_handle();
    fn test_field_create_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_bindless_array) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_bindless_array)
            )
        );
    }
    test_field_create_bindless_array();
    fn test_field_destroy_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_bindless_array) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_bindless_array)
            )
        );
    }
    test_field_destroy_bindless_array();
    fn test_field_emplace_buffer_in_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).emplace_buffer_in_bindless_array) as usize
                    - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(emplace_buffer_in_bindless_array)
            )
        );
    }
    test_field_emplace_buffer_in_bindless_array();
    fn test_field_emplace_tex2d_in_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).emplace_tex2d_in_bindless_array) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(emplace_tex2d_in_bindless_array)
            )
        );
    }
    test_field_emplace_tex2d_in_bindless_array();
    fn test_field_emplace_tex3d_in_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).emplace_tex3d_in_bindless_array) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(emplace_tex3d_in_bindless_array)
            )
        );
    }
    test_field_emplace_tex3d_in_bindless_array();
    fn test_field_is_resource_in_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).is_resource_in_bindless_array) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(is_resource_in_bindless_array)
            )
        );
    }
    test_field_is_resource_in_bindless_array();
    fn test_field_remove_buffer_in_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).remove_buffer_in_bindless_array) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(remove_buffer_in_bindless_array)
            )
        );
    }
    test_field_remove_buffer_in_bindless_array();
    fn test_field_remove_tex2d_in_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).remove_tex2d_in_bindless_array) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(remove_tex2d_in_bindless_array)
            )
        );
    }
    test_field_remove_tex2d_in_bindless_array();
    fn test_field_remove_tex3d_in_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).remove_tex3d_in_bindless_array) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(remove_tex3d_in_bindless_array)
            )
        );
    }
    test_field_remove_tex3d_in_bindless_array();
    fn test_field_create_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_stream) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_stream)
            )
        );
    }
    test_field_create_stream();
    fn test_field_destroy_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_stream) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_stream)
            )
        );
    }
    test_field_destroy_stream();
    fn test_field_synchronize_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).synchronize_stream) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(synchronize_stream)
            )
        );
    }
    test_field_synchronize_stream();
    fn test_field_dispatch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dispatch) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(dispatch)
            )
        );
    }
    test_field_dispatch();
    fn test_field_dispatch_span() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dispatch_span) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(dispatch_span)
            )
        );
    }
    test_field_dispatch_span();
    fn test_field_dispatch_func() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dispatch_func) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(dispatch_func)
            )
        );
    }
    test_field_dispatch_func();
    fn test_field_stream_native_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stream_native_handle) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(stream_native_handle)
            )
        );
    }
    test_field_stream_native_handle();
    fn test_field_create_swap_chain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_swap_chain) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_swap_chain)
            )
        );
    }
    test_field_create_swap_chain();
    fn test_field_destroy_swap_chain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_swap_chain) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_swap_chain)
            )
        );
    }
    test_field_destroy_swap_chain();
    fn test_field_swap_chain_pixel_storage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).swap_chain_pixel_storage) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(swap_chain_pixel_storage)
            )
        );
    }
    test_field_swap_chain_pixel_storage();
    fn test_field_present_display_in_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).present_display_in_stream) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(present_display_in_stream)
            )
        );
    }
    test_field_present_display_in_stream();
    fn test_field_create_shader() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_shader) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_shader)
            )
        );
    }
    test_field_create_shader();
    fn test_field_destroy_shader() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_shader) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_shader)
            )
        );
    }
    test_field_destroy_shader();
    fn test_field_create_shader_ex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_shader_ex) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_shader_ex)
            )
        );
    }
    test_field_create_shader_ex();
    fn test_field_dispatch_shader_ex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dispatch_shader_ex) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(dispatch_shader_ex)
            )
        );
    }
    test_field_dispatch_shader_ex();
    fn test_field_create_event() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_event) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_event)
            )
        );
    }
    test_field_create_event();
    fn test_field_destroy_event() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_event) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_event)
            )
        );
    }
    test_field_destroy_event();
    fn test_field_signal_event() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).signal_event) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(signal_event)
            )
        );
    }
    test_field_signal_event();
    fn test_field_wait_event() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wait_event) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(wait_event)
            )
        );
    }
    test_field_wait_event();
    fn test_field_synchronize_event() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).synchronize_event) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(synchronize_event)
            )
        );
    }
    test_field_synchronize_event();
    fn test_field_create_mesh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_mesh) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_mesh)
            )
        );
    }
    test_field_create_mesh();
    fn test_field_destroy_mesh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_mesh) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_mesh)
            )
        );
    }
    test_field_destroy_mesh();
    fn test_field_create_accel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_accel) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_accel)
            )
        );
    }
    test_field_create_accel();
    fn test_field_destroy_accel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_accel) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_accel)
            )
        );
    }
    test_field_destroy_accel();
    fn test_field_query() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).query) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(query)
            )
        );
    }
    test_field_query();
    fn test_field_requires_command_reordering() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).requires_command_reordering) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(requires_command_reordering)
            )
        );
    }
    test_field_requires_command_reordering();
}
extern "C" {
    pub fn luisa_compute_create_external_device(
        ctx: LCContext,
        impl_: *mut LCDeviceInterface,
    ) -> LCDevice;
}
impl LCArgumentTag {
    pub const BUFFER: LCArgumentTag = LCArgumentTag(0);
}
impl LCArgumentTag {
    pub const TEXTURE: LCArgumentTag = LCArgumentTag(1);
}
impl LCArgumentTag {
    pub const UNIFORM: LCArgumentTag = LCArgumentTag(2);
}
impl LCArgumentTag {
    pub const ACCEL: LCArgumentTag = LCArgumentTag(3);
}
impl LCArgumentTag {
    pub const BINDLESS_ARRAY: LCArgumentTag = LCArgumentTag(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCArgumentTag(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCBufferArgument {
    pub buffer: LCBuffer,
    pub offset: size_t,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout_LCBufferArgument() {
    assert_eq!(
        ::std::mem::size_of::<LCBufferArgument>(),
        24usize,
        concat!("Size of: ", stringify!(LCBufferArgument))
    );
    assert_eq!(
        ::std::mem::align_of::<LCBufferArgument>(),
        8usize,
        concat!("Alignment of ", stringify!(LCBufferArgument))
    );
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferArgument),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferArgument),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferArgument),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCTextureArgument {
    pub texture: LCTexture,
    pub level: u32,
}
#[test]
fn bindgen_test_layout_LCTextureArgument() {
    assert_eq!(
        ::std::mem::size_of::<LCTextureArgument>(),
        16usize,
        concat!("Size of: ", stringify!(LCTextureArgument))
    );
    assert_eq!(
        ::std::mem::align_of::<LCTextureArgument>(),
        8usize,
        concat!("Alignment of ", stringify!(LCTextureArgument))
    );
    fn test_field_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureArgument),
                "::",
                stringify!(texture)
            )
        );
    }
    test_field_texture();
    fn test_field_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureArgument),
                "::",
                stringify!(level)
            )
        );
    }
    test_field_level();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCUniformArgument {
    pub data: *const u8,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout_LCUniformArgument() {
    assert_eq!(
        ::std::mem::size_of::<LCUniformArgument>(),
        16usize,
        concat!("Size of: ", stringify!(LCUniformArgument))
    );
    assert_eq!(
        ::std::mem::align_of::<LCUniformArgument>(),
        8usize,
        concat!("Alignment of ", stringify!(LCUniformArgument))
    );
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCUniformArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCUniformArgument),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCUniformArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCUniformArgument),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCBindlessArrayArgument {
    pub array: LCBindlessArray,
}
#[test]
fn bindgen_test_layout_LCBindlessArrayArgument() {
    assert_eq!(
        ::std::mem::size_of::<LCBindlessArrayArgument>(),
        8usize,
        concat!("Size of: ", stringify!(LCBindlessArrayArgument))
    );
    assert_eq!(
        ::std::mem::align_of::<LCBindlessArrayArgument>(),
        8usize,
        concat!("Alignment of ", stringify!(LCBindlessArrayArgument))
    );
    fn test_field_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArrayArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArrayArgument),
                "::",
                stringify!(array)
            )
        );
    }
    test_field_array();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCAccelArgument {
    pub accel: LCAccel,
}
#[test]
fn bindgen_test_layout_LCAccelArgument() {
    assert_eq!(
        ::std::mem::size_of::<LCAccelArgument>(),
        8usize,
        concat!("Size of: ", stringify!(LCAccelArgument))
    );
    assert_eq!(
        ::std::mem::align_of::<LCAccelArgument>(),
        8usize,
        concat!("Alignment of ", stringify!(LCAccelArgument))
    );
    fn test_field_accel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).accel) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelArgument),
                "::",
                stringify!(accel)
            )
        );
    }
    test_field_accel();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LCArgument {
    pub tag: LCArgumentTag,
    pub node: LCNodeRef,
    pub __bindgen_anon_1: LCArgument__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LCArgument__bindgen_ty_1 {
    pub buffer: LCBufferArgument,
    pub texture: LCTextureArgument,
    pub uniform: LCUniformArgument,
    pub accel: LCAccelArgument,
    pub bindless_array: LCBindlessArrayArgument,
}
#[test]
fn bindgen_test_layout_LCArgument__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<LCArgument__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(LCArgument__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<LCArgument__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(LCArgument__bindgen_ty_1))
    );
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCArgument__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCArgument__bindgen_ty_1),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCArgument__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCArgument__bindgen_ty_1),
                "::",
                stringify!(texture)
            )
        );
    }
    test_field_texture();
    fn test_field_uniform() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCArgument__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uniform) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCArgument__bindgen_ty_1),
                "::",
                stringify!(uniform)
            )
        );
    }
    test_field_uniform();
    fn test_field_accel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCArgument__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).accel) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCArgument__bindgen_ty_1),
                "::",
                stringify!(accel)
            )
        );
    }
    test_field_accel();
    fn test_field_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCArgument__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bindless_array) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCArgument__bindgen_ty_1),
                "::",
                stringify!(bindless_array)
            )
        );
    }
    test_field_bindless_array();
}
#[test]
fn bindgen_test_layout_LCArgument() {
    assert_eq!(
        ::std::mem::size_of::<LCArgument>(),
        40usize,
        concat!("Size of: ", stringify!(LCArgument))
    );
    assert_eq!(
        ::std::mem::align_of::<LCArgument>(),
        8usize,
        concat!("Alignment of ", stringify!(LCArgument))
    );
    fn test_field_tag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCArgument),
                "::",
                stringify!(tag)
            )
        );
    }
    test_field_tag();
    fn test_field_node() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCArgument),
                "::",
                stringify!(node)
            )
        );
    }
    test_field_node();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCFunction {
    pub m: LCIRModule,
    pub captured: *const LCArgument,
    pub captured_count: size_t,
    pub args: *const LCNodeRef,
    pub arg_count: size_t,
}
#[test]
fn bindgen_test_layout_LCFunction() {
    assert_eq!(
        ::std::mem::size_of::<LCFunction>(),
        40usize,
        concat!("Size of: ", stringify!(LCFunction))
    );
    assert_eq!(
        ::std::mem::align_of::<LCFunction>(),
        8usize,
        concat!("Alignment of ", stringify!(LCFunction))
    );
    fn test_field_m() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCFunction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCFunction),
                "::",
                stringify!(m)
            )
        );
    }
    test_field_m();
    fn test_field_captured() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCFunction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).captured) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCFunction),
                "::",
                stringify!(captured)
            )
        );
    }
    test_field_captured();
    fn test_field_captured_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCFunction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).captured_count) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCFunction),
                "::",
                stringify!(captured_count)
            )
        );
    }
    test_field_captured_count();
    fn test_field_args() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCFunction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LCFunction),
                "::",
                stringify!(args)
            )
        );
    }
    test_field_args();
    fn test_field_arg_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCFunction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg_count) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(LCFunction),
                "::",
                stringify!(arg_count)
            )
        );
    }
    test_field_arg_count();
}
extern "C" {
    pub fn luisa_compute_free_c_string(cs: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn luisa_compute_context_create(exe_path: *const ::std::os::raw::c_char) -> LCContext;
}
extern "C" {
    pub fn luisa_compute_context_destroy(ctx: LCContext);
}
extern "C" {
    pub fn luisa_compute_context_runtime_directory(ctx: LCContext) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn luisa_compute_context_cache_directory(ctx: LCContext) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn luisa_compute_device_create(
        ctx: LCContext,
        name: *const ::std::os::raw::c_char,
        properties: *const ::std::os::raw::c_char,
    ) -> LCDevice;
}
extern "C" {
    pub fn luisa_compute_device_destroy(device: LCDevice);
}
extern "C" {
    pub fn luisa_compute_device_retain(device: LCDevice);
}
extern "C" {
    pub fn luisa_compute_device_release(device: LCDevice);
}
extern "C" {
    pub fn luisa_compute_buffer_create(device: LCDevice, size: size_t) -> LCBuffer;
}
extern "C" {
    pub fn luisa_compute_buffer_destroy(device: LCDevice, buffer: LCBuffer);
}
extern "C" {
    pub fn luisa_compute_texture_create(
        device: LCDevice,
        format: u32,
        dim: u32,
        w: u32,
        h: u32,
        d: u32,
        mips: u32,
    ) -> LCTexture;
}
extern "C" {
    pub fn luisa_compute_texture_destroy(device: LCDevice, texture: LCTexture);
}
extern "C" {
    pub fn luisa_compute_stream_create(device: LCDevice) -> LCStream;
}
extern "C" {
    pub fn luisa_compute_stream_destroy(device: LCDevice, stream: LCStream);
}
extern "C" {
    pub fn luisa_compute_stream_synchronize(device: LCDevice, stream: LCStream);
}
extern "C" {
    pub fn luisa_compute_stream_dispatch(
        device: LCDevice,
        stream: LCStream,
        cmd_list: LCCommandList,
    );
}
extern "C" {
    pub fn luisa_compute_shader_create(
        device: LCDevice,
        func: LCFunction,
        options: *const ::std::os::raw::c_char,
    ) -> LCShader;
}
extern "C" {
    pub fn luisa_compute_shader_destroy(device: LCDevice, shader: LCShader);
}
extern "C" {
    pub fn luisa_compute_event_create(device: LCDevice) -> LCEvent;
}
extern "C" {
    pub fn luisa_compute_event_destroy(device: LCDevice, event: LCEvent);
}
extern "C" {
    pub fn luisa_compute_event_signal(device: LCDevice, event: LCEvent, stream: LCStream);
}
extern "C" {
    pub fn luisa_compute_event_wait(device: LCDevice, event: LCEvent, stream: LCStream);
}
extern "C" {
    pub fn luisa_compute_event_synchronize(device: LCDevice, event: LCEvent);
}
extern "C" {
    pub fn luisa_compute_bindless_array_create(device: LCDevice, n: size_t) -> LCBindlessArray;
}
extern "C" {
    pub fn luisa_compute_bindless_array_destroy(device: LCDevice, array: LCBindlessArray);
}
extern "C" {
    pub fn luisa_compute_bindless_array_emplace_buffer(
        array: LCBindlessArray,
        index: size_t,
        buffer: LCBuffer,
    );
}
extern "C" {
    pub fn luisa_compute_bindless_array_emplace_tex2d(
        array: LCBindlessArray,
        index: size_t,
        texture: LCTexture,
        sampler: u32,
    );
}
extern "C" {
    pub fn luisa_compute_bindless_array_emplace_tex3d(
        array: LCBindlessArray,
        index: size_t,
        texture: LCTexture,
        sampler: u32,
    );
}
extern "C" {
    pub fn luisa_compute_bindless_array_remove_buffer(array: LCBindlessArray, index: size_t);
}
extern "C" {
    pub fn luisa_compute_bindless_array_remove_tex2d(array: LCBindlessArray, index: size_t);
}
extern "C" {
    pub fn luisa_compute_bindless_array_remove_tex3d(array: LCBindlessArray, index: size_t);
}
extern "C" {
    pub fn luisa_compute_mesh_create(
        device: LCDevice,
        v_buffer: LCBuffer,
        v_offset: size_t,
        v_stride: size_t,
        v_count: size_t,
        t_buffer: LCBuffer,
        t_offset: size_t,
        t_count: size_t,
        hint: LCAccelUsageHint,
    ) -> LCMesh;
}
extern "C" {
    pub fn luisa_compute_mesh_destroy(device: LCDevice, mesh: LCMesh);
}
extern "C" {
    pub fn luisa_compute_accel_create(device: LCDevice, hint: LCAccelUsageHint) -> LCAccel;
}
extern "C" {
    pub fn luisa_compute_accel_destroy(device: LCDevice, accel: LCAccel);
}
extern "C" {
    pub fn luisa_compute_accel_emplace_back(
        accel: LCAccel,
        mesh: *mut ::std::os::raw::c_void,
        transform: *const ::std::os::raw::c_void,
        visibility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn luisa_compute_accel_emplace(
        accel: LCAccel,
        index: size_t,
        mesh: *mut ::std::os::raw::c_void,
        transform: *const ::std::os::raw::c_void,
        visibility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn luisa_compute_accel_set_transform(
        accel: LCAccel,
        index: size_t,
        transform: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn luisa_compute_accel_set_visibility(
        accel: LCAccel,
        index: size_t,
        visibility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn luisa_compute_accel_pop_back(accel: LCAccel);
}
extern "C" {
    pub fn luisa_compute_command_list_create() -> LCCommandList;
}
extern "C" {
    pub fn luisa_compute_command_list_append(list: LCCommandList, command: LCCommand);
}
extern "C" {
    pub fn luisa_compute_command_list_empty(list: LCCommandList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luisa_compute_command_list_clear(list: LCCommandList);
}
extern "C" {
    pub fn luisa_compute_command_list_destroy(list: LCCommandList);
}
extern "C" {
    pub fn luisa_compute_command_upload_buffer(
        buffer: LCBuffer,
        offset: size_t,
        size: size_t,
        data: *const ::std::os::raw::c_void,
    ) -> LCCommand;
}
extern "C" {
    pub fn luisa_compute_command_download_buffer(
        buffer: LCBuffer,
        offset: size_t,
        size: size_t,
        data: *mut ::std::os::raw::c_void,
    ) -> LCCommand;
}
extern "C" {
    pub fn luisa_compute_command_copy_buffer_to_buffer(
        src: LCBuffer,
        src_offset: size_t,
        dst: LCBuffer,
        dst_offset: size_t,
        size: size_t,
    ) -> LCCommand;
}
extern "C" {
    pub fn luisa_compute_command_copy_buffer_to_texture(
        buffer: LCBuffer,
        buffer_offset: size_t,
        texture: LCTexture,
        storage: LCPixelStorage,
        level: u32,
        size: lc_uint3,
    ) -> LCCommand;
}
extern "C" {
    pub fn luisa_compute_command_copy_texture_to_buffer(
        buffer: LCBuffer,
        buffer_offset: size_t,
        tex: LCTexture,
        tex_storage: LCPixelStorage,
        level: u32,
        size: lc_uint3,
    ) -> LCCommand;
}
extern "C" {
    pub fn luisa_compute_command_copy_texture_to_texture(
        src: LCTexture,
        src_level: u32,
        dst: LCTexture,
        dst_level: u32,
        storage: LCPixelStorage,
        size: lc_uint3,
    ) -> LCCommand;
}
extern "C" {
    pub fn luisa_compute_command_upload_texture(
        handle: LCTexture,
        storage: LCPixelStorage,
        level: u32,
        size: lc_uint3,
        data: *const ::std::os::raw::c_void,
    ) -> LCCommand;
}
extern "C" {
    pub fn luisa_compute_command_download_texture(
        handle: LCTexture,
        storage: LCPixelStorage,
        level: u32,
        size: lc_uint3,
        data: *mut ::std::os::raw::c_void,
    ) -> LCCommand;
}
extern "C" {
    pub fn luisa_compute_command_dispatch_shader(shader: LCShader) -> LCCommand;
}
extern "C" {
    pub fn luisa_compute_command_dispatch_shader_set_size(
        cmd: LCCommand,
        sx: u32,
        sy: u32,
        sz: u32,
    );
}
extern "C" {
    pub fn luisa_compute_command_dispatch_shader_encode_buffer(
        cmd: LCCommand,
        buffer: LCBuffer,
        offset: size_t,
        size: size_t,
    );
}
extern "C" {
    pub fn luisa_compute_command_dispatch_shader_encode_texture(
        cmd: LCCommand,
        texture: LCTexture,
        level: u32,
    );
}
extern "C" {
    pub fn luisa_compute_command_dispatch_shader_encode_uniform(
        cmd: LCCommand,
        data: *const ::std::os::raw::c_void,
        size: size_t,
    );
}
extern "C" {
    pub fn luisa_compute_command_dispatch_shader_encode_bindless_array(
        cmd: LCCommand,
        array: LCBindlessArray,
    );
}
extern "C" {
    pub fn luisa_compute_command_dispatch_shader_encode_accel(cmd: LCCommand, accel: LCAccel);
}
extern "C" {
    pub fn luisa_compute_command_build_mesh(
        mesh: LCMesh,
        request: LCAccelBuildRequest,
        vertex_buffer: LCBuffer,
        vertex_buffer_offset: size_t,
        vertex_buffer_size: size_t,
        triangle_buffer: LCBuffer,
        triangle_buffer_offset: size_t,
        triangle_buffer_size: size_t,
    ) -> LCCommand;
}
extern "C" {
    pub fn luisa_compute_command_build_accel(
        accel: LCAccel,
        instance_count: u32,
        request: LCAccelBuildRequest,
        modifications: *const LCAccelBuildModification,
        n_modifications: size_t,
    ) -> LCCommand;
}
extern "C" {
    pub fn luisa_compute_pixel_format_to_storage(format: LCPixelFormat) -> LCPixelStorage;
}
extern "C" {
    pub fn luisa_compute_set_log_level_verbose();
}
extern "C" {
    pub fn luisa_compute_set_log_level_info();
}
extern "C" {
    pub fn luisa_compute_set_log_level_warning();
}
extern "C" {
    pub fn luisa_compute_set_log_level_error();
}
extern "C" {
    pub fn luisa_compute_log_verbose(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn luisa_compute_log_info(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn luisa_compute_log_warning(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn luisa_compute_log_error(msg: *const ::std::os::raw::c_char);
}
